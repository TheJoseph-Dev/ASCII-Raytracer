struct Ray {
    vec3 origin;
    vec3 dir;
};

struct ScenePayload {
    vec3 oPos;
    vec3 oN;
    float d;
};

#define MAX_D 100.0
bool miss(float hit) { return hit <= 0.0; }

float iSphere(in Ray ray, vec3 pos, float radius)
{
	//sphere at origin has equation |xyz| = r
	//sp |xyz|^2 = r^2.
	//Since |xyz| = ro + t*rd (where t is the parameter to move along the ray),
	//we have ro^2 + 2*ro*rd*t + t^2 - r2. This is a quadratic equation, so:
	vec3 oc = ray.origin - pos; //distance ray origin - sphere center
	
	float b = dot(oc, ray.dir);
	float c = dot(oc, oc) - radius * radius; //sph.w is radius
	float h = b*b - c; //Commonly known as delta. The term a is 1 so is not included.
	
    const float missHit = -1.0;
	float t = (h < 0.0) ? missHit : -b - sqrt(h); // We use -sqrt because we want the CLOSEST distance
    
	return t;
}

// axis aligned box centered at the origin, with size boxSize
float iBox( in Ray ray, vec3 boxSize, out vec3 outNormal ) 
{
    vec3 m = vec3(1.0) / ray.dir;
	vec3 n = m * ray.origin;
	vec3 k = abs(m) * boxSize;
	vec3 t1 = -(n+k);
	vec3 t2 = -n + k;
	float tN = max(max(t1.x, t1.y), t1.z);
	float tF = min(min(t2.x, t2.y), t2.z);
    
    vec3 yzx = vec3(t1.y, t1.z, t1.x);
	vec3 zxy = vec3(t1.z, t1.x, t1.y);
    outNormal = -sign(ray.dir) * step(yzx, t1) * step(zxy, t1);
    
	return (tN > tF || tF < 0.0) ?
        -1.0 :        // no hit
        min(tN, tF);
}

ScenePayload world(Ray r) {
    float d = MAX_D;
    vec3 closestHit;
    vec3 normal;

    {
        vec3 p = vec3(0.0, 0.0, 0.5);
        float s = iSphere(r, p, 0.5);
        if (!miss(s)) d = min( d, s );
        if(d == s) {
            closestHit = p;
            normal = normalize((r.origin-p) + r.dir*d);
        }
    }

    {
        vec3 p = vec3(cos(iTime*2.0), 0.4, sin(iTime*2.0));
        float s = iSphere(r, p, 0.15);
        if(!miss(s)) d = min( d, s );
        if(d == s) { 
            closestHit = p;
            normal = normalize((r.origin-p) + r.dir*d);
        }
    }

    {
        vec3 n;
        vec3 p = vec3(-2.0, -0.5, 1.0);
        r.origin -= p;
        float b = iBox(r, vec3(0.3), n);
        if (!miss(b)) d = min( d, b );
        if(d == b) { 
            closestHit = p;
            normal = n;
        }
    }

    ScenePayload sp = ScenePayload(closestHit, normal, d);
    return sp;
}


float render(Ray r) {
    ScenePayload sp = world(r);
    if (sp.d >= MAX_D) return 0.0f;

    vec3 normals = sp.oN;

    vec3 lightPos = vec3(1.0, 1.0, -1.0); //{ cos(time), 1.0, sin(time) };
    vec3 lightDir = normalize(lightPos-sp.oPos);
    float shadedScene = dot(normals, lightDir);
    //shadedScene/=2.0; // Remap normals from [-1 1] to [0 1]

    float scene = min(shadedScene, 1.0);
    return scene;
}

void rotY(out vec3 v, float angle) {
    mat2 r = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));
    v.xz *= r;
    //v.x = v.x*cos(angle) - v.z*sin(angle);
    //v.z = v.x*sin(angle) + v.z*cos(angle);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = vec2(fragCoord/iResolution.xy * 2.0 - 1.0);
    float aspect = iResolution.x/iResolution.y;
    uv.x *= aspect/2.0;
    uv /= 2.0;
    vec3 pos = vec3(-0.8, 0.5, -3.5);
    
    vec3 dir = normalize(vec3(uv, 1.0));
    //rotY(dir, 3.14/180.0 * -iTime*2.0);
    //rotY(pos, 3.14/180.0 * -iTime*2.0);
    //dir = normalize(dir);
    
    Ray ray = Ray(pos, dir);
    
    
    float scene = render(ray);
    // Output to screen
    fragColor = vec4(scene);
}